@page "/students"
@using Front.Components.Layout
@using Front.Models
@using Front.Services
@attribute [StreamRendering]

<PageTitle>Estudantes</PageTitle>
<h1>Estudantes</h1>

<StudentsModal @ref="StudentsModal" InvokeDataLoad="GetStudentData">
	<div class="row">
		<h5 class="col-sm-2" style="text-align:right">Nome:</h5>
		<input type="text" class="col-sm-10" @bind="@studentName" />
	</div>
	<div class="row">
		<h5 class="col-sm-2" style="text-align:right">RA:</h5>
		<input type="text" class="col-sm-10" @bind="@studentRa" />
	</div>
	<div class="row">
		<h5 class="col-sm-2" style="text-align: right">Série:</h5>
		<select class="col-sm-10" @bind="@studentDegree">
			<option value="0">Selecione</option>
			@foreach (var item in degreeList)
			{
				<option value="@item.id">@item.name</option>
			}
		</select>
	</div>
	<div class="row">
		<h5 class="col-sm-2" style="text-align: right">Classe:</h5>
		<select class="col-sm-10" @bind="@studentClass">
			<option value="0">Selecione</option>
			@foreach (var item in classList)
			{
				<option value="@item.id">@item.name</option>
			}
		</select>
	</div>
</StudentsModal>

<div class="row">
	<button class="btn btn-primary" @onclick="OpenNewStudentsModal">Novo Estudante</button>
</div>
@if(degreeList == null || classList == null){
	<div class="row">
		<p>Carregando....</p>
	</div>
} else {
	<div class="row">
		<div class="col-sm-1">Série</div>
		<div class="col-sm-3">
			<select @bind="@selectedDegree">
				<option value="0">Selecione</option>
				@foreach(var item in degreeList){
					<option value="@item.id">@item.name</option>
				}
			</select>
		</div>
		<div class="col-sm-1">Classe</div>
		<div class="col-sm-3">
			<select @bind="@selectedClass">
				<option value="0">Selecione</option>
				@foreach(var item in classList){
					<option value="@item.id">@item.name</option>
				}
			</select>
		</div>
		<div class="col-sm-4">
			<button type="submit" @onclick="SearchStudentByFilter">Buscar</button>
		</div>
	</div>
	<div class="row">
		<table>
			<thead>
				<tr>
					<th>Nome</th>
					<th>RA</th>
					<th>Série/Classe</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@if(studentList != null){
					@foreach(var item in studentList){
						<tr>
							<td>@item.name</td>
							<td>@item.ra</td>
							<td>@string.Format("{0} - {1}", item.degreeName, item.className)</td>
							<td class="col-sm-3"><button type="button" class="btn btn-secondary" @onclick="() => OpenStudentsModal(item)">Ver Detalhes</button> </td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
}
@code {
	private List<DegreesModel> degreeList;
	private List<ClassesModel> classList;
	private List<StudentCompleteModel> studentList;
	private StudentsModal StudentsModal { get; set; }
	private int selectedDegree;
	private int selectedClass;
	private string studentName;
	private string studentRa;
	private int studentDegree;
	private int studentClass;

	public StudentsPage()
	{
		degreeList = new List<DegreesModel>();
		classList = new List<ClassesModel>();
		studentList = new List<StudentCompleteModel>();
	}

	protected override async Task OnInitializedAsync()
	{
		degreeList = await DegreesService.GetAll();
		classList = await ClassesService.GetAll();
		studentList = await StudentsService.GetStudentsByFilter(0, 0);
		selectedDegree = 0;
		selectedClass = 0;
	}

	protected async Task SearchStudentByFilter(){
		studentList = await StudentsService.GetStudentsByFilter(selectedDegree, selectedClass);
	}

	protected void OpenNewStudentsModal(){
		studentName = string.Empty;
		studentRa = string.Empty;
		studentDegree = 0;
		studentClass = 0;
		StudentsModal.Open(new StudentsModel());
	}

	protected void OpenStudentsModal(StudentCompleteModel student)
	{
		StudentsModel studentData = new StudentsModel();
		studentData.id = student.id;
		studentData.ra = student.ra;
		studentData.name = student.name;
		studentData.degreeId = student.degreeId;
		studentData.classId = student.classId;

		studentName = student.name;
		studentRa = student.ra.ToString();
		studentDegree = student.degreeId;
		studentClass = student.classId;

		StudentsModal.Open(studentData);
	}

	protected StudentsModel GetStudentData(StudentsModel model){
		model.name = studentName;
		model.ra = int.Parse(studentRa);
		model.degreeId = studentDegree;
		model.classId = studentClass;
		return model;
	}
}
