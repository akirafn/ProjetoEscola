@using Front.Models
@using Front.Services
@inject IJSRuntime JSRuntime

<div class="modal @modalClass" tabindex="-1" role="dialog" style="display: @modalDisplay overflow-y: auto;">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">@modalTitle</h5>
				<button type="button" class="btn-close" data-dismiss="modal" aria-label="Fechar" @onclick="Close"></button>
			</div>
			<div class="modal-body">
				<div class="row">
					<h5 class="col-sm-2" style="text-align:right">Nome:</h5>
					<input type="text" class="col-sm-10" @bind="@studentName" />
				</div>
				<div class="row">
					<h5 class="col-sm-2" style="text-align:right">RA:</h5>
					<input type="text" class="col-sm-10" @bind="@studentRa" />
				</div>
				<div class="row">
					<h5 class="col-sm-2" style="text-align: right">Série:</h5>
					<select class="col-sm-10" @bind="@studentDegree">
						<option value="0">Selecione</option>
						@foreach (var item in degreeList)
						{
							<option value="@item.id">@item.name</option>
						}
					</select>
				</div>
				<div class="row">
					<h5 class="col-sm-2" style="text-align: right">Classe:</h5>
					<select class="col-sm-10" @bind="@studentClass">
						<option value="0">Selecione</option>
						@foreach (var item in classList)
						{
							<option value="@item.id">@item.name</option>
						}
					</select>
				</div>
				@ChildContent
			</div>
			<div class="modal-footer">
				<button type="button" class="btn" @onclick="SaveData">Salvar</button>
				<button type="button" class="btn" aria-label="Fechar" @onclick="Close">Fechar</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public RenderFragment ChildContent{ get; set; }
	[Parameter]
	public EventCallback InvokeDataLoad{ get; set; }

	private string modalTitle = "";
	private string modalDisplay = "none;";
	private string modalClass = "";
	private bool showBackdrop = false;
	private string studentName = "";
	private string studentRa = "";
	private int studentDegree = 0;
	private int studentClass = 0;
	private StudentsModel studentData = new StudentsModel();
	private List<DegreesModel> degreeList = new List<DegreesModel>();
	private List<ClassesModel> classList = new List<ClassesModel>();

	public void Open(StudentsModel studentData, List<DegreesModel> degreeList, List<ClassesModel> classList)
	{
		this.studentData = studentData;
		this.studentName = studentData.name;
		this.studentRa = studentData.ra.ToString();
		this.studentDegree = studentData.degreeId;
		this.studentClass = studentData.classId;
		this.degreeList = degreeList;
		this.classList = classList;

		modalDisplay = "block;";
		modalClass = "show";
		if (string.IsNullOrEmpty(studentData.name))
			modalTitle = "Novo Estudante";
		else
			modalTitle = string.Format("Dados de {0}", studentData.name);
		showBackdrop = true;
	}
	public void Close()
	{
		studentData = new StudentsModel();
		modalDisplay = "none;";
		modalClass = "";
		showBackdrop = false;
	}

	private async Task SaveData()
	{
		studentData.name = studentName;
		studentData.ra = int.Parse(studentRa);
		studentData.degreeId = studentDegree;
		studentData.classId = studentClass;

		int result = await StudentsService.SaveStudentData(studentData);
		if(result == 0){
			await JSRuntime.InvokeVoidAsync("alert", "Dados salvos com sucesso!");
			await InvokeDataLoad.InvokeAsync();
			Close();
		}
		else{
			await JSRuntime.InvokeVoidAsync("alert", "Houve um erro no processo!");
		}
	}
}
